#version 410

in vec2 fTexCoord;

out vec4 fragColor;

uniform sampler2D pos;
uniform sampler2D normal;
uniform sampler2D albedo;

uniform float slider2;
uniform vec3 cameraPosition;
uniform vec3 lightDir;

uniform vec3 lightPos[4];
uniform vec3 lightCol[4];
uniform float lightPower;


float getDiffuse(vec4 normal, vec4 light)
{
	return clamp(dot(light, normal), 0, 1);
}

void main() 
{ 
	vec4 worldPosition = texture(pos, fTexCoord);
	vec4 worldNormal = texture(normal, fTexCoord);
	vec4 albedo = texture(normal, fTexCoord);

	vec4 light = vec4(lightDir, 0);

	// get the diffuse and ambient intensity
	float intensity = getDiffuse(worldNormal, light) + 0.1;
	
	// get the unit vector from position to camera
	vec4 toCamera = normalize(worldPosition - vec4(cameraPosition,1));
	vec4 refl = reflect(toCamera, worldNormal);
	float specular = clamp(dot(refl, light), 0, 1);
	// raise to the power of 4 for tighter specular highlights
	specular = specular *specular;
	specular = specular *specular;

	// final colour is magenta diffuse/ambient with white specular for a plastic look
    fragColor = albedo*intensity + vec4(specular, specular, specular, 1);

	float intensity0 = 0;
	float specular0 = 0;
	for (int i=0; i<4; i++)
	{
		vec4 light0 = vec4(lightPos[i], 1) - worldPosition;
		float dist = length(light0);
		light0 = normalize(light0);
		float power0 = lightPower/(dist*dist);
		intensity0 = getDiffuse(worldNormal, light0) * power0;
		specular0 = clamp(dot(refl, light0), 0, 1);
		// raise to the power of 4 for tighter specular highlights
		specular0 = specular0 *specular0;
		specular0 = specular0 *specular0*power0;

		fragColor = fragColor + albedo*intensity0 * vec4(lightCol[i],1) + vec4(specular0, specular0, specular0, 1);
	}

	//fragColor = vec4(1,0,1,1);
	fragColor = vec4(worldPosition.xyz, 1);
}